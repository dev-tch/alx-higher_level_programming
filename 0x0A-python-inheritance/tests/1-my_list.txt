test cases for module 1-my_list.py
==================================

this module test class MyList that inherit  list object

test_01
=======
import module 1-my_list.py

::
    >>> module = __import__('1-my_list')

test_02
=======
check module docstring:

::
    >>> m = module.__doc__
    >>> len(m) > 1
    True

test_03
=======
Check class docstring:

::
    >>> c = module.MyList.__doc__
    >>> len(c) > 1
    True

test_04
=======
Check method docstring:

::
    >>> mod = module.MyList.print_sorted.__doc__
    >>> len(mod) > 1
    True

test04.1
========
import class MyList
::
    >>> MyList  = module.MyList

test_05
========
my list is of type list
::
	  >>> issubclass(MyList, list)
	  True

test06
======
object invalid

::
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list2.print_sorted()
    Traceback (most recent call last):
    ...
    NameError: name 'my_list2' is not defined

test_07
=======
object not instance of myList
::
    >>> my_list3 = [1, 2, 3]
    >>> my_list3.print_sorted()
    Traceback (most recent call last):
    ...
    AttributeError: 'list' object has no attribute 'print_sorted'

test_08
=======
object  MyList  is empty

::
	  >>> l = MyList()
	  >>> l.print_sorted()
	  []

test_09
=======
test fill original list of my custom class MYList

::
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

test_10
=======
test sorted list using method print_sorted of my custom class MYList

::
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

test_11
=======
original list of my custom class must be intact

::
    >>> print(my_list)
    [1, 4, 2, 3, 5]

test_12
=======
test list reversed

	  >>> l = MyList()
	  >>> l.append(4)
	  >>> l.append(3)
	  >>> l.append(2)
	  >>> l.append(1)
	  >>> print(l)
	  [4, 3, 2, 1]
	  >>> l.print_sorted()
	  [1, 2, 3, 4]
	  >>> print(l)
	  [4, 3, 2, 1]

test_13
======
invalid arguments

::
    >>> l.print_sorted(1)
    Traceback (most recent call last):
    ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given